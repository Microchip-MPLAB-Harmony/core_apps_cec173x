{"0": {
    "doc": "License",
    "title": "License",
    "content": "MICROCHIP SOFTWARE IS PROVIDED SOLELY TO ASSIST YOU IN DEVELOPING PRODUCTS AND SYSTEMS THAT USE MICROCHIP PRODUCTS. DOWNLOAD AND/OR USE OF THE SOFTWARE REQUIRES THAT YOU ACCEPT THIS SOFTWARE LICENSE AGREEMENT. IF YOU DO NOT WISH TO ACCEPT THESE TERMS, DO NOT DOWNLOAD OR USE ANY OF THE SOFTWARE. DOWNLOADING OR USING THE SOFTWARE CONTITUTES YOUR ACCEPTANCE OF THIS SOFTWARE LICENSE AGREEMENT. SOFTWARE LICENSE AGREEMENT . This Software License Agreement (\"Agreement\") is an agreement between you (if licensing as an individual) or the entity you represent (if licensing as a business) (\"you\" or \"Licensee\") and Microchip Technology Incorporated, a Delaware corporation, with a place of business at 2355 W. Chandler Blvd., Chandler, AZ 85224-6199, and its affiliates including Microchip Technology Ireland Limited, a company organized under the laws of Ireland, with a principal address at Ground Floor, Block W., East Point Business Park, Dublin, Ireland 3 (collectively, \"Microchip\") for the Microchip MPLAB Harmony Integrated Software Framework and documentation included in the download or otherwise provided by Microchip to Licensee (collectively, the \"Software\"). 1. Use. Subject to the terms of this Agreement, Microchip hereby grants Licensee a limited, revocable, non-exclusive, non-transferable, worldwide license to (a) use the Software, and (b) modify the Software provided in source code form, if any (and use and copy modifications of such Software made by Licensee), provided that in each case (with respect to clauses (a) and (b)) Licensee solely uses the Software with Microchip Products, Licensee Products, or other products agreed to by Microchip in writing. Licensee has no right to (i) substitute third party products for Microchip Products, or (ii) except as expressly provided in Section 2 below, sublicense its rights under this Agreement or otherwise disclose or distribute the Software to any third party. Licensee may make a reasonable number of copies of the Software solely as necessary to exercise its license rights in this Section 1. Licensee will not remove or alter any copyright, trademark, or other proprietary notices contained on or in the Software or any copies. “Microchip Products” means those Microchip devices purchased from Microchip or one of its authorized distributors that are identified in the Software, or if not identified in the Software, then such Microchip devices that are consistent with the purpose of the Software, including but not limited to Microchip 32-bit microcontroller and microprocessor devices and the like. “Licensee Products” means products manufactured by or for Licensee that use or incorporate Microchip Products. 2. Subcontractors. If Licensee wishes for its subcontractor to obtain and use the Software in order to provide design, manufacturing, or other services to Licensee: (a) such subcontractor may (i) download and agree to the terms of this Agreement or (ii) contact Microchip directly for a copy of this Agreement and agree to its terms; or (b) Licensee may sublicense the rights described in Section 1 directly to its subcontractor, provided that (i) such subcontractor agrees in writing to the terms of this Agreement � a copy of which will be provided to Microchip upon request, and (ii) Licensee is liable for such subcontractor's acts and omissions. 3. Third Party Software. (a) Third Party Materials. Licensee agrees to comply with third party license terms applicable to Third Party Materials, if any. Microchip will not be held responsible for Licensee's failure to comply with such terms. Microchip has no obligation to provide support or maintenance for Third Party Materials. \"Third Party Materials\" means the third party software, systems, tools, or specifications (including those of a standards setting organization) referenced in, bundled with, or included in the Software. (b) Open Source Components. Notwithstanding the license grant in Section 1 above, Licensee acknowledges that the Software may include Open Source Components. To the extent required by the licenses covering Open Source Components, the terms of such license apply in lieu of the terms of this Agreement. To the extent the terms of the licenses applicable to Open Source Components prohibit any of the restrictions in this Agreement with respect to such Open Source Components, those restrictions will not apply to the Open Source Component. \"Open Source Components\" means components of the Software that are subject to the terms of an Open Source License. \"Open Source License\" means any software license approved as an open source license by the Open Source Initiative or any substantially similar license, including without limitation any license that, as a condition of distribution of the software licensed under such license, requires that the distributor make the software available in source code format. 4. Licensee Obligations. (a) Restrictions. Except as expressly permitted by this Agreement, Licensee agrees that it will not (i) modify or alter the Software or a Microchip Product; (ii) adapt, translate, decompile, reverse engineer, disassemble the Software provided in object code form, any Microchip Product, or any samples or prototypes provided by Microchip, or create derivative works thereof; or (iii) use the Software with any software or other materials that are subject to licenses or restrictions (e.g., Open Source Licenses) that, when combined with the Software, would require Microchip to disclose, license, distribute, or otherwise make all or any part of such Software available to anyone. (b) Indemnity. Licensee will indemnify (and, at Microchip's election, defend) Microchip from and against any and all claims, costs, damages, expenses (including reasonable attorneys' fees), liabilities, and losses, arising out of or related to: (i) Licensee's modification, disclosure, or distribution of the Software or Third Party Materials; (ii) the use, sale, or distribution of Licensee Products; and (iii) an allegation that Licensee Products or Licensee's modification of the Software infringe third party intellectual property rights. (c) Licensee Products. Licensee understands and agrees that Licensee remains responsible for using its independent analysis, evaluation, and judgment in designing Licensee Products and systems and has full and exclusive responsibility to assure the safety of its products and compliance of its products (and of all Microchip Products used in or for such Licensee Products) with applicable laws and requirements. 5. Confidentiality. (a) Licensee agrees that the Software, underlying inventions, algorithms, know-how, and ideas relating to the Software, and any other non-public business or technical information disclosed by Microchip to Licensee are confidential and proprietary information, including information derived therefrom, belonging to Microchip and its licensors (collectively, \"Confidential Information\"). Licensee will use Confidential Information only to exercise its rights and perform its obligations under this Agreement and will take all reasonable measures to protect the secrecy of and avoid unauthorized access, disclosure, and use of Confidential Information. Such measures include, but are not limited to, the highest degree of care that it uses to protect its own information of a similar nature, but not less than reasonable care. Licensee will only disclose Confidential Information to its employees, subcontractors, consultants, auditors and representatives (collectively \"Representatives\") who have a need to know such information and who have use and confidentiality obligations to Licensee at least as restrictive as those set forth in this Agreement. Licensee is responsible for disclosure or misuse of Confidential Information by its Representatives. Use of Confidential Information for personal gain, for the benefit of a third party or to compete with Microchip, whether directly or indirectly, is a breach of this Agreement. Licensee will notify Microchip in writing of any actual or suspected misuse, misappropriation, or unauthorized disclosure of Confidential Information that comes to Licensee's attention. Confidential Information will not include information that: (i) is or becomes publicly available without breach of this Agreement; (ii) is known or becomes known to Licensee from a source other than Microchip without restriction and without breach of this Agreement or violation of Microchip's rights, as demonstrated by credible evidence in existence at the time of disclosure; (iii) is independently developed by Licensee without use of or reference to the Confidential Information, as demonstrated by credible evidence in existence at the time of independent development; or (iv) is disclosed generally to third parties by Microchip without restrictions similar to those contained in this Agreement. Licensee may disclose Confidential Information to the extent required under law, rule, or regulation (including those of any national securities exchange), by subpoena, civil investigative demand, or similar process, or by a court or administrative agency (each a \"Requirement\"'), provided, that to the extent permitted by applicable law, Licensee will provide prompt notice of such Requirement to Microchip to enable Microchip to seek a protective order or otherwise prevent or restrict such disclosure. (b) Return of Materials. Upon Microchip's request and direction, Licensee will promptly return or destroy the Confidential Information, including any physical information or materials provided to Licensee (together with any copies, excerpts, syntheses, CD ROMS, diskettes, etc.), and, in the case of information derived therefrom, provide written certification that all the Confidential Information has been expunged from any such materials or that all such materials have been destroyed. Further, if Licensee or its affiliates become competitors of Microchip, and Microchip notifies Licensee in writing of its status as a competitor in a given market, then Licensee will promptly engage in the return and certification process described above in this Section 5(b). 6. Ownership and Retention of Rights. All rights, title, and interest (including all intellectual property rights) in and to the Software, including any derivative works of the Software and any incremental modifications to the Software whether made by or for Licensee or Microchip (collectively, \"Microchip Property\"), are and will remain the sole and exclusive property of Microchip, whether such Microchip Property is separate or combined with any other products. Licensee, on behalf of itself and its affiliates, agrees to, and does hereby, assign to Microchip or its designee all right, title and interest (including all intellectual property rights) in and to derivative works of and any incremental modifications to the Software. Licensee will take (and will cause its affiliates, their subcontractors, and all related individuals to take) all action as may be reasonably necessary, proper or advisable to perfect and secure the ownership, licenses, intellectual property and other rights of or to Microchip as set forth in this Agreement. All rights not expressly granted under this Agreement are reserved to Microchip and its licensors and suppliers, and there are no implied rights. Licensee retains all right, title, and interest in and to any technology independently developed by Licensee not derived, directly or indirectly, from the Microchip Property or any other item of tangible property provided to Licensee by Microchip hereunder. 7. Termination. This Agreement will start once accepted by Licensee and continue unless and until terminated as provided in this Agreement. This Agreement automatically terminates immediately if Licensee violates the restrictions set forth in Sections 1, 2 or 4(a). Microchip may terminate this Agreement immediately upon notice if (a) Licensee or its affiliates become competitors of Microchip, or (b) Licensee breaches any other term of this Agreement and does not cure such breach within 30 days after receipt of written notice of such breach from Microchip. Upon termination of this Agreement, (i) the license grants in Sections 1 and 2(b) terminate, and (ii) Licensee will return to Microchip or destroy (and certify the destruction of) all Microchip Property and Confidential Information in its possession or under its control, and all copies thereof. The following sections survive termination of this Agreement: 3, 4, 5, 6, 7, 8, 9, 10, 11 and 12. 8. Dangerous Applications. The Software is not fault-tolerant and is not designed, manufactured, or intended for use in hazardous environments requiring failsafe performance (\"Dangerous Applications\"). Dangerous Applications include the operation of nuclear facilities, aircraft navigation, aircraft communication systems, air traffic control, direct life support machines, weapons systems, or any environment or system in which the failure of the Software could lead directly or indirectly to death, personal injury, or severe physical or environmental damage. Microchip specifically disclaims (a) any express or implied warranty of fitness for use of the Software in Dangerous Applications; and (b) any and all liability for loss, damages and claims resulting from the use of the Software in Dangerous Applications. 9. EU Consumers � Applicable Terms. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, THE FOLLOWING PROVISIONS APPLY INSTEAD OF SECTIONS 9 AND 10 BELOW: Microchip and its licensors will not be liable (a) for any loss suffered by Licensee in connection with the Software where such loss was not reasonably foreseeable when the Software was first downloaded by Licensee, even if such loss was the result of negligence or the failure of Microchip and its licensors to comply with this Agreement; or (b) irrespective of the basis of claim, for any loss of revenue, profit or other business or economic loss suffered. Some Software is made available to Licensee free of charge, and Licensee may at any time download further copies without charge to replace the Software initially downloaded and others may require a fee to be downloaded, or to download any further copies. In all circumstances, to the extent liability may lawfully be limited or excluded, the cumulative liability of Microchip and its licensors will not exceed USD$1,000 (or equivalent sum in the currency of the country in which Licensee resides). However, none of the foregoing limits or excludes any liability for death or personal injury arising from negligence, or for fraud, fraudulent misrepresentation or any other cause that by law cannot be excluded and limited. 10. Warranty Disclaimers. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, THE SOFTWARE IS LICENSED ON AN \"AS-IS\" BASIS. MICROCHIP MAKES NO WARRANTIES OF ANY KIND WITH RESPECT TO THE SOFTWARE, WHETHER EXPRESS, IMPLIED, STAUTORY OR OTHERWISE, AND EXPRESSLY DISCLAIMS ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE OR NON-INFRINGEMENT AND ANY WARRANTIES THAT MAY ARISE FROM USAGE OF TRADE OR COURSE OF DEALING. MICROCHIP AND ITS LICENSORS HAVE NO OBLIGATION TO CORRECT ANY DEFECTS IN THE SOFTWARE. TECHNICAL ASSISTANCE, IF PROVIDED, WILL NOT EXPAND THESE WARRANTIES. IF CUSTOMER IS A CONSUMER, THE ABOVE WILL NOT ACT TO EXCLUDE YOUR STATUTORY RIGHTS. 11. Limited Liability. EXCEPT FOR CONSUMERS TO WHOM SECTION 8 APPLIES, IN NO EVENT WILL MICROCHIP BE LIABLE, WHETHER IN CONTRACT, WARRANTY, REPRESENTATION, TORT, STRICT LIABILITY, INDEMNITY, CONTRIBUTION OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, PUNITIVE, EXEMPLARY, INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER, HOWEVER CAUSED, OR ANY LOSS OF PRODUCTION, COST OF PROCUREMENT OF SUBSTITUTE PRODUCTS OR SERVICES, ANY LOSS OF PROFITS, LOSS OF BUSINESS, LOSS OF USE OR LOSS OF DATA, OR INTERRUPTION OF BUSINESS ARISING OUT OF THIS AGREEMENT, HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSS, AND NOTWITHSTANDING ANY FAILURE OF ESSENTIAL PURPOSE OF ANY LIMITED REMEDY. MICROCHIP'S TOTAL AGGREGATE LIABILITY UNDER THIS AGREEMENT WILL NOT EXCEED USD$1,000. 12. General. (a) This Agreement will be governed by and construed in accordance with the laws of the State of Arizona and the United States, without regard to conflicts of law provisions. The parties hereby irrevocably consent to the exclusive personal jurisdiction and venue of the state and federal courts in Maricopa County, Arizona for any dispute relating to this Agreement. WHERE LICENSEE IS A CONSUMER LOCATED IN EUROPE, this Agreement is subject to the laws of the country in which the Software is downloaded, and, to the extent so mandated by such laws, subject to the jurisdiction of the courts of that country. The parties expressly disclaim the applicability of the United Nations Convention on Contracts for the International Sale of Goods in connection with this Agreement. (b) Unless the parties have a mutually executed agreement relating to the licensing of this Software by Microchip to Licensee (\"Signed Agreement\"), this Agreement constitutes the entire agreement between the parties with respect to the Software, and supersedes and replaces prior or contemporaneous written or verbal agreements or communications between the parties regarding the Software, including any purchase orders. If the parties have a Signed Agreement, this Agreement does not supersede or replace that Signed Agreement. This Agreement will not be modified except by a written agreement signed by an authorized representative of Microchip. If any provision of this Agreement is held by a court of competent jurisdiction to be illegal, invalid, or unenforceable, that provision will be limited or eliminated to the minimum extent necessary so that this Agreement will otherwise remain in full force and effect and enforceable. No waiver of any breach of any provision of this Agreement constitutes a waiver of any prior, concurrent, or subsequent breach of the same or any other provisions of this Agreement, and no waiver will be effective unless made in writing and signed by an authorized representative of the waiving party. (c) Licensee agrees to comply with all import and export laws and restrictions and regulations of the Department of Commerce or other United States or foreign agency or authority. (d) This Agreement will bind and inure to the benefit of each party's permitted successors and assigns. Licensee may not assign this Agreement in whole or in part, whether by law or otherwise, without Microchip's prior written consent. Any merger, consolidation, amalgamation, reorganization, transfer of all or substantially all assets or other change in control or majority ownership (\"Change of Control\") is considered an assignment for the purpose of this Section. Any attempt to assign this Agreement without such consent will be null and void. However, Microchip may assign this Agreement to an affiliate, or to another entity in the event of a Change of Control. (e) Licensee acknowledges its breach of any confidentiality or proprietary rights provision of this Agreement would cause Microchip irreparable damage, for which the award of damages would not be an adequate remedy. Licensee, therefore, agrees if Microchip alleges that Licensee has breached or violated any such provisions then Microchip may seek equitable relief, in addition to all other remedies at law or in equity. (f) Authorized representatives of Microchip shall have the right to reasonably inspect Licensee's premises and to audit Licensee's records and inventory of Licensee Products, whether located on Licensee's premises or elsewhere at any time, announced or unannounced, and in its sole and absolute discretion, in order to ensure Licensee's adherence to the terms of this Agreement. (g) Consistent with 48 C.F.R. �12.212 or 48 C.F.R. �227.7202-1 through 227.7202-4, as applicable, the Software is being licensed to U.S. Government end users (i) only as Commercial Items, and (ii) with only those rights as are granted to all other end users pursuant to the terms and conditions of the applicable Microchip licenses. To the extent the Software (or a portion thereof) qualifies as �technical data' as such term is defined in 48 C.F.R. �252.227-7015(a)(5), then its use, duplication, or disclosure by the U.S. Government is subject to the restrictions set forth in subparagraphs (a) through (e) of the Rights in Technical Data clause at 48 C.F.R. �252.227-7015. Contractor/manufacturer is Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199. Questions about this Agreement should be sent to: Microchip Technology Inc., 2355 W. Chandler Blvd., Chandler, AZ 85224-6199 USA. ATTN: Marketing. v.3.3.2021 . ",
    "url": "http://localhost:4000/core_apps_cec173x/mplab_harmony_license.html",
    "relUrl": "/mplab_harmony_license.html"
  },"1": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "content": "This example application shows how to use the AT24 driver to perform read and write operations on AT24 series of EEPROM. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#i2c-eeprom-at24-driver---eeprom-read-write",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#i2c-eeprom-at24-driver---eeprom-read-write"
  },"2": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Description",
    "content": ". | This example uses the AT24 driver to communicate with I2C based On-Board AT24MAC402 series EEPROMs to perform write and read operations in Bare-Metal environment. | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#description",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#description"
  },"3": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#downloading-and-building-the-application"
  },"4": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Interface the EEPROM 3 click Board by making the following connections: . | Connect a wire from GPIO140 (I2C06_SCL) available on Pin 28 of P4 header to the SCL pin of the EEPROM 3 click board | Connect a wire from GPIO132 (I2C06_SDA) available on Pin 26 of P4 header to the SDA pin of the EEPROM 3 click board | Connect GND and VCC between the EEPROM 3 click Board and the CEC 1736 Development Board | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#setting-up-the-hardware"
  },"5": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED indicates success or failure: . | The LED is turned ON when the value read from the EEPROM matched with the written value | The LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . The following table provides the LED name: . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html#running-the-application"
  },"6": {
    "doc": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "title": "I2C EEPROM AT24 driver - EEPROM Read Write",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html",
    "relUrl": "/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html"
  },"7": {
    "doc": "W25 SQI flash driver - Flash read write in Quad IO mode",
    "title": "W25 SQI flash driver - Flash read write in Quad IO mode",
    "content": "This example application shows how to use the W25 SQI flash driver to perform block operations on the On-Board W25 Flash memory in Quad IO mode. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#w25-sqi-flash-driver---flash-read-write-in-quad-io-mode",
    "relUrl": "/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#w25-sqi-flash-driver---flash-read-write-in-quad-io-mode"
  },"8": {
    "doc": "W25 SQI flash driver - Flash read write in Quad IO mode",
    "title": "Description",
    "content": "This application uses the W25 driver to Erase/Write/Read on the On-Board W25 Flash memory using the QMSPI peripheral library in Quad IO mode. The application consists of APP_W25_Tasks() which is called through SYS_Tasks() routine. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#description",
    "relUrl": "/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#description"
  },"9": {
    "doc": "W25 SQI flash driver - Flash read write in Quad IO mode",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/sqi_flash/W25/W25_sqi_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#downloading-and-building-the-application"
  },"10": {
    "doc": "W25 SQI flash driver - Flash read write in Quad IO mode",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#setting-up-the-hardware"
  },"11": {
    "doc": "W25 SQI flash driver - Flash read write in Quad IO mode",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | LED is turned ON when the data read from W25 flash matches with the data written in it | . Refer to the following table for LED name: . | Board | LED Name | . | CEC 1736 Development Board | LED5 | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#running-the-application",
    "relUrl": "/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html#running-the-application"
  },"12": {
    "doc": "W25 SQI flash driver - Flash read write in Quad IO mode",
    "title": "W25 SQI flash driver - Flash read write in Quad IO mode",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html",
    "relUrl": "/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html"
  },"13": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "USART driver asynchronous - UART echo",
    "content": "This example echoes the received characters over the console using the USART driver in asynchronous mode. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/async/usart_echo/readme.html#usart-driver-asynchronous---uart-echo",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#usart-driver-asynchronous---uart-echo"
  },"14": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "Description",
    "content": "This example uses the USART driver in asynchronous mode in Bare-Metal environment to communicate over the console. It receives and echo’s back the characters entered by the user. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/async/usart_echo/readme.html#description",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#description"
  },"15": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/usart/async/usart_echo/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/async/usart_echo/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#downloading-and-building-the-application"
  },"16": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/async/usart_echo/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#setting-up-the-hardware"
  },"17": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Type a line of characters and press the Enter key (NOTE: Number of characters entered before pressing enter key must be less than 256)) | Entered line will be echoed back and the LED is toggled | The following table provides the LED names | . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/async/usart_echo/readme.html#running-the-application",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html#running-the-application"
  },"18": {
    "doc": "USART driver asynchronous - UART echo",
    "title": "USART driver asynchronous - UART echo",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/async/usart_echo/readme.html",
    "relUrl": "/apps/driver/usart/async/usart_echo/readme.html"
  },"19": {
    "doc": "USART driver synchronous - UART echo",
    "title": "USART driver synchronous - UART echo",
    "content": "This example echoes the received characters over the console using the USART driver in synchronous mode. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/sync/usart_echo/readme.html#usart-driver-synchronous---uart-echo",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#usart-driver-synchronous---uart-echo"
  },"20": {
    "doc": "USART driver synchronous - UART echo",
    "title": "Description",
    "content": "This example uses the USART driver in synchronous mode in RTOS environment to communicate over the console. It receives and echo’s back the characters entered by the user. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/sync/usart_echo/readme.html#description",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#description"
  },"21": {
    "doc": "USART driver synchronous - UART echo",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/usart/sync/usart_echo/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/sync/usart_echo/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#downloading-and-building-the-application"
  },"22": {
    "doc": "USART driver synchronous - UART echo",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/sync/usart_echo/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#setting-up-the-hardware"
  },"23": {
    "doc": "USART driver synchronous - UART echo",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | The console displays the following message . | Type a line of characters and press the Enter key (NOTE: Number of characters entered before pressing enter key must be less than 256)) | Entered line will be echoed back and the LED is toggled | The following table provides the LED names | . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/sync/usart_echo/readme.html#running-the-application",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html#running-the-application"
  },"24": {
    "doc": "USART driver synchronous - UART echo",
    "title": "USART driver synchronous - UART echo",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/usart/sync/usart_echo/readme.html",
    "relUrl": "/apps/driver/usart/sync/usart_echo/readme.html"
  },"25": {
    "doc": "FAT filesystem using W25 Media",
    "title": "FAT filesystem using W25 Media",
    "content": "This application shows an example of using the FAT File System to access QMSPI based W25 flash media . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/fs/sqi_flash_fat/readme.html#fat-filesystem-using-w25-media",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#fat-filesystem-using-w25-media"
  },"26": {
    "doc": "FAT filesystem using W25 Media",
    "title": "Description",
    "content": "File System Operations on the On-Board W25 Flash Memory: . | Performs a SYS_FS_FormatDisk | Opens a newfile.txt on the W25 flash | Write and reads back 4KB of data on newfile.txt | Verifies the Data Read back | . File system layer uses: . | One instance of the Memory driver is used to communicate with the On-Board QMSPI Flash memory | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/fs/sqi_flash_fat/readme.html#description",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#description"
  },"27": {
    "doc": "FAT filesystem using W25 Media",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/fs/sqi_flash_fat/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/fs/sqi_flash_fat/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#downloading-and-building-the-application"
  },"28": {
    "doc": "FAT filesystem using W25 Media",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/fs/sqi_flash_fat/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#setting-up-the-hardware"
  },"29": {
    "doc": "FAT filesystem using W25 Media",
    "title": "Running the Application",
    "content": ". | Build and program the application using its IDE | The LED is turned ON if data has successfully been written and read back from file “newfile.txt” | . Refer to the following table for LED name: . | Board | LED Name | . | CEC 1736 Development Board | LED5 | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/fs/sqi_flash_fat/readme.html#running-the-application",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html#running-the-application"
  },"30": {
    "doc": "FAT filesystem using W25 Media",
    "title": "FAT filesystem using W25 Media",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/fs/sqi_flash_fat/readme.html",
    "relUrl": "/apps/fs/sqi_flash_fat/readme.html"
  },"31": {
    "doc": "FreeRTOS basic",
    "title": "FreeRTOS basic",
    "content": "This example application demonstrates context switching between four tasks of different priorites. Two tasks run periodically while the other two tasks are event driven. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/rtos/freertos/basic_freertos/readme.html#freertos-basic",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#freertos-basic"
  },"32": {
    "doc": "FreeRTOS basic",
    "title": "Description",
    "content": "This demonstration creates four tasks each of differen priority. Task1 has the lowest priority, followed by Task2 and Task3 which has the highest priority. Task1 and Task2 run periodically. Task3 blocks until a character is received on UART terminal. Task3 registers a read callback with the UART PLIB and blcoks on a UART receive semaphore. The semaphore is given from the registered callback which is called when a character is receved on the terminal. All the tasks print messages on the UART terminal to indicate tasks entry/exit. Since all the tasks use the same UART peripheral library, a mutex is used to guard the shared resource (UART ring buffer). | Task1: Task1 is configured for priority 1 (lowest of all the application tasks). The task1 runs for about 100 ticks and then blocks for 10 milliseconds. Each time task1 is run, it prints a message on the UART console “Tsk1-P1 &lt;-“ where, the &lt;- symbol indicates that task1 is running. Just before blocking it prints another message on the UART console “Tsk1-P1 -&gt;” where, the -&gt; symbol indicates that task1 is about to put itself into a blocked state. | Task2: Task2 is configured for priority 2. The task2 runs for about 10 ticks and then blocks for 250 milliseconds. Each time task2 is run, it prints a message on the UART console “Tsk2-P2 &lt;-“ where, the &lt;- symbol indicates that task2 is running. Just before blocking it prints another message on the UART console “Tsk2-P2 -&gt;” where, the -&gt; symbol indicates that task2 is about to put itself into a blocked state. | Task3: Task3 is configured for priority 3. It remains blocked on a semaphore which is released when a character is entered on the UART console. Once active, the task reads out the received characters and toggles LED if letter ‘L’ or ‘l’ is pressed. The task then runs for about 50 ticks, before again blocking itself until a new character is received. Each time task3 is run, it prints a message on the UART console “Tsk3-P3 &lt;-“ where, the &lt;- symbol indicates that task2 is running. Just before blocking it prints another message on the UART console “Tsk3-P3 -&gt;” where, the -&gt; symbol indicates that task3 is about to put itself into a blocked state. | . The following figure shows possible context switching between the tasks. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/rtos/freertos/basic_freertos/readme.html#description",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#description"
  },"33": {
    "doc": "FreeRTOS basic",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/rtos/freertos/basic_freertos/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/rtos/freertos/basic_freertos/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#downloading-and-building-the-application"
  },"34": {
    "doc": "FreeRTOS basic",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/rtos/freertos/basic_freertos/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#setting-up-the-hardware"
  },"35": {
    "doc": "FreeRTOS basic",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera Term) on the computer. | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . Baud : 115200 . Data : 8 Bits . Parity : None . Stop : 1 Bit . Flow Control : None . | Build and program the application using its IDE. | Observe the following output on the terminal. | Enter any character on the terminal to run task3. Notice how task1 and task2 are pre-empted by task3 as task3 is of higher priority than task1 and task2. Pressing character ‘l’ or “L’ toggles the on board LED. Notice how task1 and task2 are not run when characters are entered continuously on the terminal. | . Refer to the following table for LED and Switch name: . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/rtos/freertos/basic_freertos/readme.html#running-the-application",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html#running-the-application"
  },"36": {
    "doc": "FreeRTOS basic",
    "title": "FreeRTOS basic",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/rtos/freertos/basic_freertos/readme.html",
    "relUrl": "/apps/rtos/freertos/basic_freertos/readme.html"
  },"37": {
    "doc": "Console Debug System Service using UART",
    "title": "Console Debug System Service using UART",
    "content": "This example application demonstrates the UART based console and debug system service. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#console-debug-system-service-using-uart",
    "relUrl": "/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#console-debug-system-service-using-uart"
  },"38": {
    "doc": "Console Debug System Service using UART",
    "title": "Description",
    "content": "The application example first demonstrates the various debug system service macros. It then demonstrates the console related APIs. The application asks the user to enter a character on the console which is echoed back using the console system service read/write APIs. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#description",
    "relUrl": "/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#description"
  },"39": {
    "doc": "Console Debug System Service using UART",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/system/console_debug/sys_console_debug_uart_read_write/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#downloading-and-building-the-application"
  },"40": {
    "doc": "Console Debug System Service using UART",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#setting-up-the-hardware"
  },"41": {
    "doc": "Console Debug System Service using UART",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Observe the following output on the terminal . | First few prints demonstrate the output from the debug system service APIs | It then prints the free space available in the receive buffer | It then asks the user to enter 10 characters | . | After entering 10 characters, observe the following output on the terminal . | The output first prints the free space available in the receive buffer | Since 10 characters are pending to be read out from the receive buffer, the free space in the receive buffer is reduced by 10 | After this, it prints the received characters on the terminal | Application then waits for the transmit buffer to become empty | Once empty, the application prints the free space available in the transmit buffer, which should be same as the size of the transmit buffer configured in MHC minus 1 | . | After this, the demonstration asks the user to enter a character, and echoes it back on the terminal. | LED toggles every-time the character is printed on the terminal | . | . Refer to the following table for LED name: . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#running-the-application",
    "relUrl": "/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html#running-the-application"
  },"42": {
    "doc": "Console Debug System Service using UART",
    "title": "Console Debug System Service using UART",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html",
    "relUrl": "/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html"
  },"43": {
    "doc": "Time System Service multi-client",
    "title": "Time System Service multi-client",
    "content": "This example application demonstrates the multi-client system timer functionality . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/time/sys_time_multiclient/readme.html#time-system-service-multi-client",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#time-system-service-multi-client"
  },"44": {
    "doc": "Time System Service multi-client",
    "title": "Description",
    "content": "This application demonstrates timer functionality (with two clients to the Time System Service) by periodically printing a message on console every two seconds and blinking an LED every one second. Delay, counter and single shot timer functionality is demonstrated on a switch press. On entering a character on the UART terminal, the application reads the current value of the 64 bit counter (say, count 1). It then starts a delay of 500 milliseconds and waits for the delay to expire. Once the delay has expired, the application again reads the current value of the 64 bit counter (say, count 2) and calculates the difference between the two counter values. The difference count indicates the time spent for the delay and is printed on the console as, “Delay time = x ms”, where x is the delay value and is equal to 500 milliseconds in the given example. The application then starts a single shot timer of 100 milliseconds. When the single shot timer expires, a message is printed on the console that says “Single shot timer of 100 ms expired”. This message is printed only once on every switch press. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/time/sys_time_multiclient/readme.html#description",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#description"
  },"45": {
    "doc": "Time System Service multi-client",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/system/time/sys_time_multiclient/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/time/sys_time_multiclient/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#downloading-and-building-the-application"
  },"46": {
    "doc": "Time System Service multi-client",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Connect the USB port P2 on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/time/sys_time_multiclient/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#setting-up-the-hardware"
  },"47": {
    "doc": "Time System Service multi-client",
    "title": "Running the Application",
    "content": ". | Open the Terminal application (Ex.:Tera term) on the computer | Connect to the EDBG Virtual COM port and configure the serial settings as follows: . | Baud : 115200 | Data : 8 Bits | Parity : None | Stop : 1 Bit | Flow Control : None | . | Build and Program the application using its IDE | Observe the following message getting printed on the console every two seconds . | Enter a character on the terminal and observe the following output on the terminal (highlighted in red box) . | “Delay time = 500 ms” indicates the amount of time spent during the delay | “Single shot timer of 100 ms expired” is printed only once on every switch press | . | LED indicates the periodic timer functionality . | LED is toggled periodically every one second | . | . Refer to the following table for LED and Switch name: . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/time/sys_time_multiclient/readme.html#running-the-application",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html#running-the-application"
  },"48": {
    "doc": "Time System Service multi-client",
    "title": "Time System Service multi-client",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/system/time/sys_time_multiclient/readme.html",
    "relUrl": "/apps/system/time/sys_time_multiclient/readme.html"
  },"49": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "I2C driver asynchronous - I2C EEPROM",
    "content": "This example application shows how to use the I2C driver in asynchronous mode to perform operations on the EEPROM. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c/async/i2c_eeprom/readme.html#i2c-driver-asynchronous---i2c-eeprom",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#i2c-driver-asynchronous---i2c-eeprom"
  },"50": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Description",
    "content": "This example uses the I2C driver in asynchronous mode to communicate with the EEPROM to perform write and read operations in Bare-Metal environment. This application uses I2C driver to read and write data from an AT24CM02 EEPROM device. ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c/async/i2c_eeprom/readme.html#description",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#description"
  },"51": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Downloading and building the application",
    "content": "To clone or download this application from Github, go to the main page of this repository and then click Clone button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these instructions. Path of the application within the repository is apps/driver/i2c/async/i2c_eeprom/firmware . To build the application, refer to the following table and open the project using its IDE. | Project Name | Description | . | cec1736_evb.X | MPLABX project for CEC 1736 Development Board | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c/async/i2c_eeprom/readme.html#downloading-and-building-the-application",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#downloading-and-building-the-application"
  },"52": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Setting up the hardware",
    "content": "The following table shows the target hardware for the application projects. | Project Name | Board | . | cec1736_evb.X | CEC 1736 Development Board | . |   |   | . Setting up CEC 1736 Development Board . | Interface the EEPROM 3 click Board by making the following connections: . | Connect a wire from GPIO140 (I2C06_SCL) available on Pin 28 of P4 header to the SCL pin of the EEPROM 3 click board | Connect a wire from GPIO132 (I2C06_SDA) available on Pin 26 of P4 header to the SDA pin of the EEPROM 3 click board | Connect GND and VCC between the EEPROM 3 click Board and the CEC 1736 Development Board | . | Connect the Debug USB port on the board to the computer using a micro USB cable | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c/async/i2c_eeprom/readme.html#setting-up-the-hardware",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#setting-up-the-hardware"
  },"53": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "Running the Application",
    "content": ". | Build and Program the application using its IDE | LED indicates success or failure: . | The LED is turned ON when the value read from the EEPROM matched with the written value | The LED is turned OFF when the value read from the EEPROM did not match with the written value | . | . The following table provides the LED name: . | Board | LED Name | . | CEC 1736 Development Board | LED6 | . |   |   | . ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c/async/i2c_eeprom/readme.html#running-the-application",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html#running-the-application"
  },"54": {
    "doc": "I2C driver asynchronous - I2C EEPROM",
    "title": "I2C driver asynchronous - I2C EEPROM",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/apps/driver/i2c/async/i2c_eeprom/readme.html",
    "relUrl": "/apps/driver/i2c/async/i2c_eeprom/readme.html"
  },"55": {
    "doc": "Release notes",
    "title": "Microchip MPLAB® Harmony 3 Release Notes",
    "content": " ",
    "url": "http://localhost:4000/core_apps_cec173x/release_notes.html#microchip-mplab-harmony-3-release-notes",
    "relUrl": "/release_notes.html#microchip-mplab-harmony-3-release-notes"
  },"56": {
    "doc": "Release notes",
    "title": "Harmony 3 peripheral library application examples for CEC173x family  v3.1.0",
    "content": "Development kit and demo application support . Following table provides number of peripheral library examples available for different development kits. | Development Kits | MPLAB X applications | . | CEC1736 Development Board | 9 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.05 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.3.0 | . | MPLAB® XC32 C/C++ Compiler v4.21 | . ",
    "url": "http://localhost:4000/core_apps_cec173x/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v310",
    "relUrl": "/release_notes.html#harmony-3-peripheral-library-application-examples-for-cec173x-family--v310"
  },"57": {
    "doc": "Release notes",
    "title": "Harmony 3 based application examples for CEC173x family v3.0.0",
    "content": "Development kit and demo application support . Following table provides number of driver, system service and library examples available for different development kits. | Development Kits | MPLAB X applications | . | CEC173x Evaluation Board | 9 | . New Features . | None | . Known Issues . | None | . Development Tools . | MPLAB® X IDE v6.05 | MPLAB® X IDE plug-ins: . | MPLAB® Code Configurator (MCC) v5.2.2 | . | MPLAB® XC32 C/C++ Compiler v4.21 | . ",
    "url": "http://localhost:4000/core_apps_cec173x/release_notes.html#harmony-3-based-application-examples-for-cec173x-family-v300",
    "relUrl": "/release_notes.html#harmony-3-based-application-examples-for-cec173x-family-v300"
  },"58": {
    "doc": "Release notes",
    "title": "Release notes",
    "content": ". ",
    "url": "http://localhost:4000/core_apps_cec173x/release_notes.html",
    "relUrl": "/release_notes.html"
  },"59": {
    "doc": "Harmony 3 driver and system service application examples for CEC173x family",
    "title": "Harmony 3 driver and system service application examples for CEC173x family",
    "content": "[![MCHP](https://www.microchip.com/ResourcePackages/Microchip/assets/dist/images/logo.png)](https://www.microchip.com) # Harmony 3 driver and system service application examples for CEC173x family MPLAB® Harmony 3 is an extension of the MPLAB® ecosystem for creating embedded firmware solutions for Microchip 32-bit SAM and PIC® microcontroller and microprocessor devices. Refer to the following links for more information. - [Microchip 32-bit MCUs](https://www.microchip.com/design-centers/32-bit) - [Microchip 32-bit MPUs](https://www.microchip.com/design-centers/32-bit-mpus) - [Microchip MPLAB X IDE](https://www.microchip.com/mplab/mplab-x-ide) - [Microchip MPLAB® Harmony](https://www.microchip.com/mplab/mplab-harmony) - [Microchip MPLAB® Harmony Pages](https://microchip-mplab-harmony.github.io/) This repository contains the MPLAB® Harmony 3 driver and system service application examples for CEC173x family - [Release Notes](/core_apps_cec173x/release_notes.html) - [MPLAB® Harmony License](/core_apps_cec173x/mplab_harmony_license.html) To clone or download these applications from Github, go to the [main page of this repository](https://github.com/Microchip-MPLAB-Harmony/core_apps_cec173x) and then click **Clone** button to clone this repository or download as zip file. This content can also be downloaded using content manager by following these [instructions](https://github.com/Microchip-MPLAB-Harmony/contentmanager/wiki). ## Contents Summary | Folder | Description | --- | --- | apps | Contains driver and system service example applications | ## Code Examples The following applications are provided to demonstrate the typical or interesting usage models of one or more peripheral libraries. | Name | Description | ---- | ----------- | [I2C driver asynchronous - I2C EEPROM](/core_apps_cec173x/apps/driver/i2c/async/i2c_eeprom/readme.html) | This example application shows how to use the I2C driver in asynchronous mode to perform operations on the EEPROM | [I2C EEPROM AT24 driver - EEPROM Read Write](/core_apps_cec173x/apps/driver/i2c_eeprom/at24/at24_eeprom_read_write/readme.html) | This example application shows how to use the AT24 driver to perform read and write operations on AT24 series of EEPROM | [W25 SQI flash driver - Flash read write in Quad IO mode](/core_apps_cec173x/apps/driver/sqi_flash/w25/w25_sqi_read_write/readme.html) | This example application shows how to use the W25 SQI flash driver to perform block operations on the On-Board W25 Flash memory in Quad IO mode | [USART driver asynchronous - UART echo](/core_apps_cec173x/apps/driver/usart/async/usart_echo/readme.html) | This example echoes the received characters over the console using the USART driver in asynchronous mode | [USART driver synchronous - UART echo](/core_apps_cec173x/apps/driver/usart/sync/usart_echo/readme.html) | This example echoes the received characters over the console using the USART driver in synchronous mode | [FAT filesystem using W25 Media](/core_apps_cec173x/apps/fs/sqi_flash_fat/readme.html) | This application shows an example of using the FAT File System to access QMSPI based W25 flash media | [FreeRTOS basic](/core_apps_cec173x/apps/rtos/freertos/basic_freertos/readme.html) | This example application demonstrates context switching between four tasks of different priorites. Two tasks run periodically while the other two tasks are event driven | [Console Debug System Service using UART](/core_apps_cec173x/apps/system/console_debug/sys_console_debug_uart_read_write/readme.html) | This example application demonstrates the UART based console and debug system service | [Time System Service multi-client](/core_apps_cec173x/apps/system/time/sys_time_multiclient/readme.html) | This example application demonstrates the multi-client system timer functionality | ____ [![License](https://img.shields.io/badge/license-Harmony%20license-orange.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_cec173x/blob/master/mplab_harmony_license.md) [![Latest release](https://img.shields.io/github/release/Microchip-MPLAB-Harmony/core_apps_cec173x.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_cec173x/releases/latest) [![Latest release date](https://img.shields.io/github/release-date/Microchip-MPLAB-Harmony/core_apps_cec173x.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_cec173x/releases/latest) [![Commit activity](https://img.shields.io/github/commit-activity/y/Microchip-MPLAB-Harmony/core_apps_cec173x.svg)](https://github.com/Microchip-MPLAB-Harmony/core_apps_cec173x/graphs/commit-activity) [![Contributors](https://img.shields.io/github/contributors-anon/Microchip-MPLAB-Harmony/core_apps_cec173x.svg)]() ____ [![Follow us on Youtube](https://img.shields.io/badge/Youtube-Follow%20us%20on%20Youtube-red.svg)](https://www.youtube.com/user/MicrochipTechnology) [![Follow us on LinkedIn](https://img.shields.io/badge/LinkedIn-Follow%20us%20on%20LinkedIn-blue.svg)](https://www.linkedin.com/company/microchip-technology) [![Follow us on Facebook](https://img.shields.io/badge/Facebook-Follow%20us%20on%20Facebook-blue.svg)](https://www.facebook.com/microchiptechnology/) [![Follow us on Twitter](https://img.shields.io/twitter/follow/MicrochipTech.svg?style=social)](https://twitter.com/MicrochipTech) [![](https://img.shields.io/github/stars/Microchip-MPLAB-Harmony/core_apps_cec173x.svg?style=social)]() [![](https://img.shields.io/github/watchers/Microchip-MPLAB-Harmony/core_apps_cec173x.svg?style=social)]() ",
    "url": "http://localhost:4000/core_apps_cec173x/",
    "relUrl": "/"
  }
}
